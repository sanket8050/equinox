generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // NeonDB connection string
}

// ==================== MODELS ====================

model User {
  id        String   @id @default(cuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())

  // Relations
  groups               GroupMember[]
  transactions         Transaction[]
  participants         TransactionParticipant[]
  notifications        Notification[]
  createdGroups        Group[]                  @relation("UserCreatedGroups")
  initialContributions InitialContribution[]
}

model Group {
  id          String    @id @default(cuid())
  name        String
  type        GroupType
  code        String    @unique
  createdById String
  createdAt   DateTime  @default(now())

  // Relations
  createdBy     User                  @relation("UserCreatedGroups", fields: [createdById], references: [id])
  members       GroupMember[]
  transactions  Transaction[]
  initialFunds  InitialContribution[]
  notifications Notification[]
}

model GroupMember {
  id         String     @id @default(cuid())
  userId     String
  groupId    String
  role       MemberRole @default(MEMBER)
  balance    Decimal    @default(0) @db.Decimal(10, 2)
  department String?
  joinedAt   DateTime   @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id])
  group Group @relation(fields: [groupId], references: [id])

  @@unique([userId, groupId])
}

model Transaction {
  id          String   @id @default(cuid())
  groupId     String
  addedById   String
  description String
  amount      Decimal  @db.Decimal(10, 2)
  date        DateTime @default(now())
  isDeleted   Boolean  @default(false)

  // Relations
  group        Group                    @relation(fields: [groupId], references: [id])
  addedBy      User                     @relation(fields: [addedById], references: [id])
  participants TransactionParticipant[]
}

model TransactionParticipant {
  id            String  @id @default(cuid())
  transactionId String
  userId        String
  paid          Decimal @default(0) @db.Decimal(10, 2)
  owed          Decimal @default(0) @db.Decimal(10, 2)

  // Relations
  transaction Transaction @relation(fields: [transactionId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}

model InitialContribution {
  id      String   @id @default(cuid())
  groupId String
  userId  String
  amount  Decimal  @db.Decimal(10, 2)
  date    DateTime @default(now())

  // Relations
  group Group @relation(fields: [groupId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  groupId   String?
  title     String
  message   String
  type      NotificationType
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())

  // Relations
  user  User   @relation(fields: [userId], references: [id])
  group Group? @relation(fields: [groupId], references: [id])
}

// ==================== ENUMS ====================

enum GroupType {
  FRIENDS
  ORGANIZATION
}

enum MemberRole {
  ADMIN
  MEMBER
}

enum NotificationType {
  EXPENSE_ADDED
  EXPENSE_DELETED
  SETTLEMENT_UPDATE
  REMINDER
  INFO
}
